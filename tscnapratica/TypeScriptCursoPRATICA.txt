Type Script na pratica

CONFIGURACOES PARA O GIT GLOBAL 
git config --global user.name "Carlos Melo"
git config --global user.email "carlaofernandesedu@gmail.com"


Informacoes para trabalhar para poder rodar o TypeScript Localmente 
npm init para criar o package.json
modificar o arquivo package.json para fazer a referencia ao comando para ser executado 
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "tsc": "tsc"
  },
npm install typescript@2.6.1 --save-dev
npm run tsc 
Nao consegui fazer rodar o comando para executar build para outra pasta
Somente funcionou para a pasta onde o arquivo ts 
Passou a funciona somente a partir do arquivo de compilacao de TS tsconfig.json  


************************************
AULA 2 AMBIENTE DE DESENVOLVIMENTO 
************************************
pasta public acessivel para o browser 
pasta src (para ficar o codigo fonte) 
Duas pastas 
public 
src  
compilar os arquivos ts para a pasta public 



************************************
AULA 3 CONFIGURAR COMPILACAO DO TYPESCRIPT  
************************************
compilar pastas inteiras 
tsc src\posts.ts --outDir public 
compilar a pasta inteira 

o TypeScript pode ler um arquivo para efetuar a compilacao dos procedimentos via TypeScript 
tsconfig.json 
compilacao para ES5 porque os browsers ainda suportam a maioria ES5
{
  "compilerOptions :
  {
    "target": "es5",
	"outDir": "public",
	"rootDir": "src"
	},
	"files": 
	[ "src/aulaintroducao.ts" ]
  }
}
OUTRA DICA TEM UMA OPCAO PARA QUE O TERMINAL FIQUE O PROCESSO
RODANDO e monitorando se houve mudancas nos arquivos para gerar a compilação 
tsc -w

******************************************************
AULA 3 - O QUE NAO FAZER EM TYPESCRIPT 
*****************************************************
Da dicas de modelar por objeto 

******************************************************
AULA - RECURSOS DE OO SENDO USADOS E EVENT MANAGER 
*****************************************************
Utilizado mecanismos de orientação a objetos para organizar melhor o codigo 
Utilizado tecnica para desacoplar a chamada entre as classes 
Event Manager  
class EventManager
{
    private listerers = [];

    addListeners(eventName, callable)
    {
       if(!(this.listerers[eventName] instanceof Array)){
           this.listerers[eventName] = [];
       }
       this.listerers[eventName].push(callable);
    }

    runEventName(eventName){
        for(let callable of this.listerers[eventName] ){
           callable();
        }
    }
}


******************************************************
AULA 5 - SOURCEMAP E DEBUG  
*****************************************************
comando que gera o arquivo sourcemap que diz ao browser como fazer o mapeamento de typescript
com o javascript gerado 

comando npm run tsc --sourceMap ou colocar dentro do arquvo tsconfig.json 

AULA 6 - DESCREVENDO TIPOS 

Importante entender com descrever o item Tipado relacionado a funcao 
interface ListernerInterface
{
  ():void
}
ou 
Dentro de declaracao 
(eventName: string , callable: {():void})


DECLARACAO COM CHAVE VALOR 
private listeners : { [eventName:string]: Array<ListenerInterface> } = {};



Tambem relembrar os conceitos de interface para definir moldes para funcoes e dentro 
de declaracoes de membros de instancias tambem

REPASSANDO 
function show(obj:{category:"cat",product:"product"} ) //aqui tipei e informei conteudo padrao
function show({categoria,produto}:{categoria:string,produto:string}) // ao inves de trabalhar com objeto 

const soma = (x:number,y:number):number =>
{
  return x + y; 
}

function soma(x:number,y:number):number
{
  return x + y; 
}

const soma = (x:number,y:number):number => x+y;

PARAMETROS DEFAULT
 let DefaultParameters = (nome,apelido:string = 'Junior') =>
 {}
PARAMETROS OPCIONAIS 
 let OptionalParameters = (nome:string, apelido?:string) => 
 {
 }

interface ObjectValue{
   categoria:string,
   product?: string
 }
