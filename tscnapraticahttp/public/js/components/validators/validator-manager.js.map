{"version":3,"file":"validator-manager.js","sourceRoot":"","sources":["../../../../src/components/validators/validator-manager.ts"],"names":[],"mappings":";;;IAIA,MAAqB,gBAAgB;QAEjC,YAAoB,UAAqF;YAArF,eAAU,GAAV,UAAU,CAA2E;QAEzG,CAAC;QAED,OAAO;YACH,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,EAChC;gBACI,IAAI,KAAK,GAAI,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAqB,CAAC,KAAK,CAAC;gBAC7E,KAAI,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,EAC9B;oBACG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EACpB;wBACG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACpB,OAAO,KAAK,CAAC;qBACf;iBACH;aACJ;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KACJ;IArBD,mCAqBC","sourcesContent":["interface ValidatorRuleCallable{\r\n    (value:string):boolean;\r\n}\r\n\r\nexport default class ValidatorManager{\r\n\r\n    constructor(private chainRules:Array<{selector:string,rules:Array<ValidatorRuleCallable>,message:string}>){\r\n\r\n    }\r\n\r\n    isValid():boolean{\r\n        for (let item of this.chainRules)\r\n        {\r\n            let valor = (document.querySelector(item.selector)as HTMLInputElement).value;\r\n            for(let itemRule of item.rules)\r\n            {\r\n               if (!itemRule(valor))\r\n               {\r\n                  alert(item.message);\r\n                  return false;     \r\n               }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}"]}